diff --git a/config/install/permissions_by_term.settings.yml b/config/install/permissions_by_term.settings.yml
index 0f9b72c7f..33d108ae8 100644
--- a/config/install/permissions_by_term.settings.yml
+++ b/config/install/permissions_by_term.settings.yml
@@ -1,4 +1,5 @@
 permission_mode: FALSE
+allow_viewing: FALSE
 require_all_terms_granted: FALSE
 disable_node_access_records: FALSE
 target_bundles: { }
diff --git a/config/schema/permissions_by_term.schema.yml b/config/schema/permissions_by_term.schema.yml
index 01e6ebc9a..bc87ee9cb 100644
--- a/config/schema/permissions_by_term.schema.yml
+++ b/config/schema/permissions_by_term.schema.yml
@@ -5,6 +5,9 @@ permissions_by_term.settings:
     permission_mode:
       type: boolean
       label: 'Permission mode'
+    allow_viewing:
+      type: boolean
+      label: 'Allow viewing'
     require_all_terms_granted:
       type: boolean
       label: 'Require all terms granted'
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 0f2c5a2c8..40c0d2b1a 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -82,6 +82,19 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#default_value' => \Drupal::config('permissions_by_term.settings')->get('disable_node_access_records'),
     ];

+    $form['allow_viewing'] = [
+      '#type'          => 'checkbox',
+      '#title'         => t('Allow all viewing'),
+      '#description'   => t('This mode makes Permissions by Term not effect the viewing of nodes and terms (will effect editing and deleting only).
+<br />Can only be used if <em>Disable node access records</em> is set.'),
+      '#default_value' => \Drupal::config('permissions_by_term.settings')->get('allow_viewing'),
+      '#states' => [
+        'visible' => [
+          ':input[name="disable_node_access_records"]' => ['checked' => TRUE],
+        ],
+      ],
+    ];
+
     $form['target_bundles'] = [
       '#type' => 'checkboxes',
       '#title' => $this->t('Limit by taxonomy vocabularies'),
@@ -136,6 +149,16 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       ->set('disable_node_access_records', $form_state->getValue('disable_node_access_records'))
       ->save();

+    $allow_viewing = FALSE;
+    if ($form_state->getValue('disable_node_access_records')) {
+      // Only settable if "disable_node_access_records" is also set.
+      $allow_viewing = $form_state->getValue('allow_viewing');
+    }
+    \Drupal::configFactory()
+      ->getEditable('permissions_by_term.settings')
+      ->set('allow_viewing', $allow_viewing)
+      ->save();
+
     $bundles = array_filter($form_state->getValue('target_bundles'));
     $this->configFactory
       ->getEditable('permissions_by_term.settings')
diff --git a/src/Listener/KernelEventListener.php b/src/Listener/KernelEventListener.php
index 914e5f14e..6b2f95dca 100644
--- a/src/Listener/KernelEventListener.php
+++ b/src/Listener/KernelEventListener.php
@@ -57,6 +57,11 @@ class KernelEventListener implements EventSubscriberInterface
    */
   private $disabledNodeAccessRecords;

+  /**
+   * @var bool
+   */
+  private $allowViewing;
+
   public function __construct(
     AccessCheck $accessCheck,
     AccessStorage $accessStorage,
@@ -72,6 +77,7 @@ public function __construct(
     $this->eventDispatcher = $eventDispatcher;
     $this->pageCacheKillSwitch = $pageCacheKillSwitch;
     $this->disabledNodeAccessRecords = $configFactory->get('permissions_by_term.settings')->get('disable_node_access_records');
+    $this->allowViewing = $configFactory->get('permissions_by_term.settings')->get('allow_viewing');
   }

   /**
@@ -154,7 +160,7 @@ private function canRequestGetNode(Request $request): bool {

   private function handleAccessToTaxonomyTermViewsPages() {
     $url_object = \Drupal::service('path.validator')->getUrlIfValid(\Drupal::service('path.current')->getPath());
-    if ($url_object instanceof Url && $url_object->isRouted() && $url_object->getRouteName() === 'entity.taxonomy_term.canonical') {
+    if ($url_object instanceof Url && $url_object->isRouted() && $url_object->getRouteName() === 'entity.taxonomy_term.canonical' && !$this->allowViewing) {
       $route_parameters = $url_object->getrouteParameters();
       $termLangcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
       if (!$this->accessCheckService->isAccessAllowedByDatabase($route_parameters['taxonomy_term'], \Drupal::currentUser()->id(), $termLangcode)) {
@@ -166,6 +172,11 @@ private function handleAccessToTaxonomyTermViewsPages() {

   private function handleAccessToNodePages(GetResponseEvent $event) {
     // Restricts access to nodes (views/edit).
+    $route_name = $event->getRequest()->get('_route');
+    if ($this->allowViewing && $route_name == 'entity.node.canonical') {
+      // Allow viewing.
+      return;
+    }
     if ($this->canRequestGetNode($event->getRequest())) {
       $nid = $event->getRequest()->attributes->get('node')->get('nid')->getValue()['0']['value'];
       if (!$this->accessCheckService->canUserAccessByNodeId($nid, false, $this->accessStorageService->getLangCode($nid))) {
