<?php

/**
 * @file
 * Contains an_task_157.module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function an_task_157_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_form_commerce_cart_form_default_1') {
    $form['show_link_in_modal'] = [
      '#type' => 'button',
      '#name' => 'show_link_in_modal',
      '#value' => 'Share',
      '#ajax' => [
        'callback' => 'ajaxModal',
      ],
    ];
  }
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function ajaxModal(array &$form, FormStateInterface $form_state) {
  $content['#attached']['library'][] = 'an_task_157/an_task_157';

  $options = [
    'width' => '400',
    'height' => '150',
    'dialogClass' => 'my-form',
  ];

  // Generate verification key.
  $request_time = \Drupal::time()->getCurrentTime();
  $verification_key = hash("sha256", $request_time);

  $host = \Drupal::request()->getSchemeAndHttpHost();

  // Render shareable link in modal window if data was successfully pushed into database.
  if (putProductsInDatabase($verification_key)) {
    $content['#markup'] = '<p id="cart-link">'. $host . '/shareable-cart?key=' . $verification_key . '</p>';
  } else {
    $content['#markup'] = '<p>Error!</p>';
  }

  $title = 'Here is the link to your cart:';
  $response = new AjaxResponse();
  $response->addCommand(new OpenModalDialogCommand($title, $content, $options));

  return $response;
}

/**
 * Put cart data in the database.
 *
 * @param $verification_key
 *
 * @return bool
 */
function putProductsInDatabase($verification_key) {
  $data = [];

  // Load products from the cart.
  $cart_provider = \Drupal::service('commerce_cart.cart_provider');
  $order = $cart_provider->getCart('default');
  $order_items = $order->order_items->referencedEntities();

  // Prepare an array with product data.
  foreach ($order_items as $order_item) {
    $item = [];

    $product_variation = $order_item->getPurchasedEntity();
    $item['sku'] = $product_variation->getSku();
    $item['title'] = $order_item->title->value;
    $item['price'] = (int) $order_item->getUnitPrice()->getNumber();
    $item['quantity'] = (int) $order_item->quantity->value;

    $data[] = $item;
  }

  $data = json_encode($data);

  $connection = \Drupal::service('database');
  $result = $connection->insert('shareable_cart_info')
    ->fields([
      'verification_key' => $verification_key,
      'data' => $data,
    ])
    ->execute();

  return TRUE;
}

/**
 * Load shareable cart from the database by verification key.
 *
 * @param $verification_key
 *
 * @return mixed
 */
function getProductsFromDatabase($verification_key) {
  return \Drupal::database()->select('shareable_cart_info', 'sci')
    ->fields('sci', ['data'])
    ->condition('sci.verification_key', $verification_key)
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function an_task_157_preprocess_node(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = '';

  if (!empty($variables['node'])) {
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  }

  // Remove page caching for the node.
  if ($alias === '/shareable-cart') {
    $variables['#cache']['max-age'] = 0;
  }

  // Collect params from URL.
  $request = \Drupal::request();
  $query_parameters = $request->query->all();

  //Load shareable products.
  if ($alias === '/shareable-cart' && isset($query_parameters['key'])) {
    $verification_key = $query_parameters['key'];
    $cart_data = getProductsFromDatabase($verification_key);

    if (!empty($cart_data)) {
      $cart_data = json_decode($cart_data, true);
      $variables['cart_data'] = $cart_data;
      $variables['verification_key'] = $verification_key;
    }
  }

  //Add shareable products to the cart.
  if ($alias === '/shareable-cart' && isset($_POST['verification_key'])) {
    $verification_key = $_POST['verification_key'];
    $cart_data = getProductsFromDatabase($verification_key);

    if (!empty($cart_data)) {
      $cart_data = json_decode($cart_data, true);

      $store_id = 1;
      $order_type = 'default';

      $entity_manager = \Drupal::entityTypeManager();
      $cart_manager = \Drupal::service('commerce_cart.cart_manager');
      $cart_provider = \Drupal::service('commerce_cart.cart_provider');
      $store = $entity_manager->getStorage('commerce_store')->load($store_id);

      // Load current users cart.
      $cart = $cart_provider->getCart($order_type, $store);

      if (!$cart) {
        $cart = $cart_provider->createCart($order_type, $store);
      }

      // Push each product to the users cart.
      foreach ($cart_data as $product) {
        $product_variation = $entity_manager->getStorage('commerce_product_variation')->load($product['sku']);

        //Create new order item
        $order_item = $entity_manager->getStorage('commerce_order_item')->create([
          'type' => 'default',
          'purchased_entity' => (string) $product['sku'],
          'quantity' => $product['quantity'],
          'unit_price' => $product_variation->getPrice(),
        ]);
        $order_item->save();

        $cart_manager->addOrderItem($cart, $order_item);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function an_task_157_theme($existing, $type, $theme, $path) {
  return [
    'node__53' => [
      'template' => 'node--53',
      'base hook' => 'node',
    ]
  ];
}
